from mapa import *
from tree_search import SearchNode

def deadlock_corner(self,box):
    #The following deadlock is for corners this also inclues corners generated by boxes
    #eg1: A wall on top and left is a deadlock
    #eg2: A wall on top and a box on the right is a deadlock
    (x,y) = box.position
    
    #Validation and macro atribution of the tiles
    up = mapa.get_tile((x,y+1))
    down = mapa.get_tile((x,y-1))
    left = mapa.get_tile((x-1,y))
    right = mapa.get_tile((x+1,y))

    #checking top left
    if((up in [Tiles.WALL] or up in [Tiles.BOX]) and left in [Tiles.WALL]): 
        return True

    #checking top right
    elif(up in [Tiles.WALL] and right in [Tiles.WALL]):
        return True

    #checking bottom left
    elif(down in [Tiles.WALL] and left in [Tiles.WALL]):
        return True

    #checking bottom right
    elif(down in [Tiles.WALL] and right in [Tiles.WALL]):
        return True   

    else:
        return False 

def deadlock_wall(self,box):
    
    (x,y) = box.position
    
    #Validation and macro atribution of the tiles
    up = mapa.get_tile((x,y+1))
    down = mapa.get_tile((x,y-1))
    left = mapa.get_tile((x-1,y))
    right = mapa.get_tile((x+1,y))
    
    #top wall
    #bottom wall
    #left wall
    #right wall
    pass

def translate(solution):#translates the movements of the keeper to a wasd list
    res = []
    #print(solution)
    for x in range(1,len(solution)):
        print(f"new:{solution[x].keeper}old:{solution[x-1].keeper}")
        yaxis = solution[x].keeper[1] - solution[x-1].keeper[1]
        xaxis = solution[x].keeper[0] - solution[x-1].keeper[0]
        
        if xaxis == -1:
            res += 'a'
        if xaxis == 1:
            res += 'd'
        if yaxis == 1:
            res += 's'
        if yaxis == -1:
            res += 'w'
    return res
'''
def move(self,box,movement):#checks if the keeper has space to move
     #use breath to go to the position .... [moves to pos] + move eg: from up, left => right,down + left
    (x,y) = box.position
    
    #Validation and macro atribution of the tiles
    up = mapa.get_tile((x,y+1))
    down = mapa.get_tile((x,y-1))
    left = mapa.get_tile((x-1,y))
    right = mapa.get_tile((x+1,y))

    #Assuming movment is in the form of (x,y)
    if movement == (0,1):
        res = search(down)
    elif movement == (0,-1):
        res = search(up)
    elif movement == (1,0):
        res = search(left)
    elif movement == (-1,0):
        res = search(right)
    
    return res #if res is none there is no way to move the box in that way
  '''  



    
